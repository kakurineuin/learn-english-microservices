// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: exam_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExamServiceClient is the client API for ExamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamServiceClient interface {
	CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error)
	UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*UpdateExamResponse, error)
	FindExams(ctx context.Context, in *FindExamsRequest, opts ...grpc.CallOption) (*FindExamsResponse, error)
	DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*DeleteExamResponse, error)
}

type examServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExamServiceClient(cc grpc.ClientConnInterface) ExamServiceClient {
	return &examServiceClient{cc}
}

func (c *examServiceClient) CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error) {
	out := new(CreateExamResponse)
	err := c.cc.Invoke(ctx, "/pb.ExamService/CreateExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*UpdateExamResponse, error) {
	out := new(UpdateExamResponse)
	err := c.cc.Invoke(ctx, "/pb.ExamService/UpdateExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) FindExams(ctx context.Context, in *FindExamsRequest, opts ...grpc.CallOption) (*FindExamsResponse, error) {
	out := new(FindExamsResponse)
	err := c.cc.Invoke(ctx, "/pb.ExamService/FindExams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*DeleteExamResponse, error) {
	out := new(DeleteExamResponse)
	err := c.cc.Invoke(ctx, "/pb.ExamService/DeleteExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamServiceServer is the server API for ExamService service.
// All implementations must embed UnimplementedExamServiceServer
// for forward compatibility
type ExamServiceServer interface {
	CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error)
	UpdateExam(context.Context, *UpdateExamRequest) (*UpdateExamResponse, error)
	FindExams(context.Context, *FindExamsRequest) (*FindExamsResponse, error)
	DeleteExam(context.Context, *DeleteExamRequest) (*DeleteExamResponse, error)
	mustEmbedUnimplementedExamServiceServer()
}

// UnimplementedExamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExamServiceServer struct {
}

func (UnimplementedExamServiceServer) CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExam not implemented")
}
func (UnimplementedExamServiceServer) UpdateExam(context.Context, *UpdateExamRequest) (*UpdateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExam not implemented")
}
func (UnimplementedExamServiceServer) FindExams(context.Context, *FindExamsRequest) (*FindExamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExams not implemented")
}
func (UnimplementedExamServiceServer) DeleteExam(context.Context, *DeleteExamRequest) (*DeleteExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExam not implemented")
}
func (UnimplementedExamServiceServer) mustEmbedUnimplementedExamServiceServer() {}

// UnsafeExamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServiceServer will
// result in compilation errors.
type UnsafeExamServiceServer interface {
	mustEmbedUnimplementedExamServiceServer()
}

func RegisterExamServiceServer(s grpc.ServiceRegistrar, srv ExamServiceServer) {
	s.RegisterService(&ExamService_ServiceDesc, srv)
}

func _ExamService_CreateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).CreateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExamService/CreateExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).CreateExam(ctx, req.(*CreateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_UpdateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).UpdateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExamService/UpdateExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).UpdateExam(ctx, req.(*UpdateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_FindExams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).FindExams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExamService/FindExams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).FindExams(ctx, req.(*FindExamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_DeleteExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).DeleteExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExamService/DeleteExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).DeleteExam(ctx, req.(*DeleteExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExamService_ServiceDesc is the grpc.ServiceDesc for ExamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ExamService",
	HandlerType: (*ExamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExam",
			Handler:    _ExamService_CreateExam_Handler,
		},
		{
			MethodName: "UpdateExam",
			Handler:    _ExamService_UpdateExam_Handler,
		},
		{
			MethodName: "FindExams",
			Handler:    _ExamService_FindExams_Handler,
		},
		{
			MethodName: "DeleteExam",
			Handler:    _ExamService_DeleteExam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exam_service.proto",
}
