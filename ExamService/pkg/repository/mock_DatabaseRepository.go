// Code generated by mockery v2.39.1. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/kakurineuin/learn-english-microservices/exam-service/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockDatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type MockDatabaseRepository struct {
	mock.Mock
}

type MockDatabaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseRepository) EXPECT() *MockDatabaseRepository_Expecter {
	return &MockDatabaseRepository_Expecter{mock: &_m.Mock}
}

// ConnectDB provides a mock function with given fields: uri
func (_m *MockDatabaseRepository) ConnectDB(uri string) error {
	ret := _m.Called(uri)

	if len(ret) == 0 {
		panic("no return value specified for ConnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uri)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_ConnectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectDB'
type MockDatabaseRepository_ConnectDB_Call struct {
	*mock.Call
}

// ConnectDB is a helper method to define mock.On call
//   - uri string
func (_e *MockDatabaseRepository_Expecter) ConnectDB(uri interface{}) *MockDatabaseRepository_ConnectDB_Call {
	return &MockDatabaseRepository_ConnectDB_Call{Call: _e.mock.On("ConnectDB", uri)}
}

func (_c *MockDatabaseRepository_ConnectDB_Call) Run(run func(uri string)) *MockDatabaseRepository_ConnectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_ConnectDB_Call) Return(_a0 error) *MockDatabaseRepository_ConnectDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_ConnectDB_Call) RunAndReturn(run func(string) error) *MockDatabaseRepository_ConnectDB_Call {
	_c.Call.Return(run)
	return _c
}

// CountExamsByUserId provides a mock function with given fields: ctx, userId
func (_m *MockDatabaseRepository) CountExamsByUserId(ctx context.Context, userId string) (int64, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for CountExamsByUserId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CountExamsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountExamsByUserId'
type MockDatabaseRepository_CountExamsByUserId_Call struct {
	*mock.Call
}

// CountExamsByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockDatabaseRepository_Expecter) CountExamsByUserId(ctx interface{}, userId interface{}) *MockDatabaseRepository_CountExamsByUserId_Call {
	return &MockDatabaseRepository_CountExamsByUserId_Call{Call: _e.mock.On("CountExamsByUserId", ctx, userId)}
}

func (_c *MockDatabaseRepository_CountExamsByUserId_Call) Run(run func(ctx context.Context, userId string)) *MockDatabaseRepository_CountExamsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_CountExamsByUserId_Call) Return(count int64, err error) *MockDatabaseRepository_CountExamsByUserId_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *MockDatabaseRepository_CountExamsByUserId_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_CountExamsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExam provides a mock function with given fields: ctx, exam
func (_m *MockDatabaseRepository) CreateExam(ctx context.Context, exam model.Exam) (string, error) {
	ret := _m.Called(ctx, exam)

	if len(ret) == 0 {
		panic("no return value specified for CreateExam")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Exam) (string, error)); ok {
		return rf(ctx, exam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Exam) string); ok {
		r0 = rf(ctx, exam)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Exam) error); ok {
		r1 = rf(ctx, exam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CreateExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExam'
type MockDatabaseRepository_CreateExam_Call struct {
	*mock.Call
}

// CreateExam is a helper method to define mock.On call
//   - ctx context.Context
//   - exam model.Exam
func (_e *MockDatabaseRepository_Expecter) CreateExam(ctx interface{}, exam interface{}) *MockDatabaseRepository_CreateExam_Call {
	return &MockDatabaseRepository_CreateExam_Call{Call: _e.mock.On("CreateExam", ctx, exam)}
}

func (_c *MockDatabaseRepository_CreateExam_Call) Run(run func(ctx context.Context, exam model.Exam)) *MockDatabaseRepository_CreateExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Exam))
	})
	return _c
}

func (_c *MockDatabaseRepository_CreateExam_Call) Return(examId string, err error) *MockDatabaseRepository_CreateExam_Call {
	_c.Call.Return(examId, err)
	return _c
}

func (_c *MockDatabaseRepository_CreateExam_Call) RunAndReturn(run func(context.Context, model.Exam) (string, error)) *MockDatabaseRepository_CreateExam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuestion provides a mock function with given fields: ctx, question
func (_m *MockDatabaseRepository) CreateQuestion(ctx context.Context, question model.Question) (string, error) {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuestion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) (string, error)); ok {
		return rf(ctx, question)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) string); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Question) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type MockDatabaseRepository_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.Question
func (_e *MockDatabaseRepository_Expecter) CreateQuestion(ctx interface{}, question interface{}) *MockDatabaseRepository_CreateQuestion_Call {
	return &MockDatabaseRepository_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", ctx, question)}
}

func (_c *MockDatabaseRepository_CreateQuestion_Call) Run(run func(ctx context.Context, question model.Question)) *MockDatabaseRepository_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Question))
	})
	return _c
}

func (_c *MockDatabaseRepository_CreateQuestion_Call) Return(questionId string, err error) *MockDatabaseRepository_CreateQuestion_Call {
	_c.Call.Return(questionId, err)
	return _c
}

func (_c *MockDatabaseRepository_CreateQuestion_Call) RunAndReturn(run func(context.Context, model.Question) (string, error)) *MockDatabaseRepository_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAnswerWrongByQuestionId provides a mock function with given fields: ctx, questionId
func (_m *MockDatabaseRepository) DeleteAnswerWrongByQuestionId(ctx context.Context, questionId string) error {
	ret := _m.Called(ctx, questionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnswerWrongByQuestionId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, questionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnswerWrongByQuestionId'
type MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call struct {
	*mock.Call
}

// DeleteAnswerWrongByQuestionId is a helper method to define mock.On call
//   - ctx context.Context
//   - questionId string
func (_e *MockDatabaseRepository_Expecter) DeleteAnswerWrongByQuestionId(ctx interface{}, questionId interface{}) *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call {
	return &MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call{Call: _e.mock.On("DeleteAnswerWrongByQuestionId", ctx, questionId)}
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call) Run(run func(ctx context.Context, questionId string)) *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call) Return(_a0 error) *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseRepository_DeleteAnswerWrongByQuestionId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExam provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) DeleteExam(ctx context.Context, examId string) error {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, examId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_DeleteExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExam'
type MockDatabaseRepository_DeleteExam_Call struct {
	*mock.Call
}

// DeleteExam is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) DeleteExam(ctx interface{}, examId interface{}) *MockDatabaseRepository_DeleteExam_Call {
	return &MockDatabaseRepository_DeleteExam_Call{Call: _e.mock.On("DeleteExam", ctx, examId)}
}

func (_c *MockDatabaseRepository_DeleteExam_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_DeleteExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteExam_Call) Return(_a0 error) *MockDatabaseRepository_DeleteExam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_DeleteExam_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseRepository_DeleteExam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuestion provides a mock function with given fields: ctx, questionId
func (_m *MockDatabaseRepository) DeleteQuestion(ctx context.Context, questionId string) error {
	ret := _m.Called(ctx, questionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuestion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, questionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_DeleteQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuestion'
type MockDatabaseRepository_DeleteQuestion_Call struct {
	*mock.Call
}

// DeleteQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - questionId string
func (_e *MockDatabaseRepository_Expecter) DeleteQuestion(ctx interface{}, questionId interface{}) *MockDatabaseRepository_DeleteQuestion_Call {
	return &MockDatabaseRepository_DeleteQuestion_Call{Call: _e.mock.On("DeleteQuestion", ctx, questionId)}
}

func (_c *MockDatabaseRepository_DeleteQuestion_Call) Run(run func(ctx context.Context, questionId string)) *MockDatabaseRepository_DeleteQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestion_Call) Return(_a0 error) *MockDatabaseRepository_DeleteQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestion_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseRepository_DeleteQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuestionsByExamId provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) DeleteQuestionsByExamId(ctx context.Context, examId string) error {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuestionsByExamId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, examId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_DeleteQuestionsByExamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuestionsByExamId'
type MockDatabaseRepository_DeleteQuestionsByExamId_Call struct {
	*mock.Call
}

// DeleteQuestionsByExamId is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) DeleteQuestionsByExamId(ctx interface{}, examId interface{}) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	return &MockDatabaseRepository_DeleteQuestionsByExamId_Call{Call: _e.mock.On("DeleteQuestionsByExamId", ctx, examId)}
}

func (_c *MockDatabaseRepository_DeleteQuestionsByExamId_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestionsByExamId_Call) Return(_a0 error) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestionsByExamId_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectDB provides a mock function with given fields:
func (_m *MockDatabaseRepository) DisconnectDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisconnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_DisconnectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectDB'
type MockDatabaseRepository_DisconnectDB_Call struct {
	*mock.Call
}

// DisconnectDB is a helper method to define mock.On call
func (_e *MockDatabaseRepository_Expecter) DisconnectDB() *MockDatabaseRepository_DisconnectDB_Call {
	return &MockDatabaseRepository_DisconnectDB_Call{Call: _e.mock.On("DisconnectDB")}
}

func (_c *MockDatabaseRepository_DisconnectDB_Call) Run(run func()) *MockDatabaseRepository_DisconnectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabaseRepository_DisconnectDB_Call) Return(_a0 error) *MockDatabaseRepository_DisconnectDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_DisconnectDB_Call) RunAndReturn(run func() error) *MockDatabaseRepository_DisconnectDB_Call {
	_c.Call.Return(run)
	return _c
}

// ExistExam provides a mock function with given fields: ctx, examId, userId
func (_m *MockDatabaseRepository) ExistExam(ctx context.Context, examId string, userId string) (bool, error) {
	ret := _m.Called(ctx, examId, userId)

	if len(ret) == 0 {
		panic("no return value specified for ExistExam")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, examId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, examId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, examId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_ExistExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistExam'
type MockDatabaseRepository_ExistExam_Call struct {
	*mock.Call
}

// ExistExam is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
//   - userId string
func (_e *MockDatabaseRepository_Expecter) ExistExam(ctx interface{}, examId interface{}, userId interface{}) *MockDatabaseRepository_ExistExam_Call {
	return &MockDatabaseRepository_ExistExam_Call{Call: _e.mock.On("ExistExam", ctx, examId, userId)}
}

func (_c *MockDatabaseRepository_ExistExam_Call) Run(run func(ctx context.Context, examId string, userId string)) *MockDatabaseRepository_ExistExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_ExistExam_Call) Return(isExist bool, err error) *MockDatabaseRepository_ExistExam_Call {
	_c.Call.Return(isExist, err)
	return _c
}

func (_c *MockDatabaseRepository_ExistExam_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockDatabaseRepository_ExistExam_Call {
	_c.Call.Return(run)
	return _c
}

// FindExamsOrderByUpdateAtDesc provides a mock function with given fields: ctx, userId, skip, limit
func (_m *MockDatabaseRepository) FindExamsOrderByUpdateAtDesc(ctx context.Context, userId string, skip int64, limit int64) ([]model.Exam, error) {
	ret := _m.Called(ctx, userId, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindExamsOrderByUpdateAtDesc")
	}

	var r0 []model.Exam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]model.Exam, error)); ok {
		return rf(ctx, userId, skip, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []model.Exam); ok {
		r0 = rf(ctx, userId, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Exam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, userId, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindExamsOrderByUpdateAtDesc'
type MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call struct {
	*mock.Call
}

// FindExamsOrderByUpdateAtDesc is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - skip int64
//   - limit int64
func (_e *MockDatabaseRepository_Expecter) FindExamsOrderByUpdateAtDesc(ctx interface{}, userId interface{}, skip interface{}, limit interface{}) *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call {
	return &MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call{Call: _e.mock.On("FindExamsOrderByUpdateAtDesc", ctx, userId, skip, limit)}
}

func (_c *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call) Run(run func(ctx context.Context, userId string, skip int64, limit int64)) *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call) Return(exams []model.Exam, err error) *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call {
	_c.Call.Return(exams, err)
	return _c
}

func (_c *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]model.Exam, error)) *MockDatabaseRepository_FindExamsOrderByUpdateAtDesc_Call {
	_c.Call.Return(run)
	return _c
}

// FindQuestionsOrderByUpdateAtDesc provides a mock function with given fields: ctx, examId, skip, limit
func (_m *MockDatabaseRepository) FindQuestionsOrderByUpdateAtDesc(ctx context.Context, examId string, skip int64, limit int64) ([]model.Question, error) {
	ret := _m.Called(ctx, examId, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindQuestionsOrderByUpdateAtDesc")
	}

	var r0 []model.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]model.Question, error)); ok {
		return rf(ctx, examId, skip, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []model.Question); ok {
		r0 = rf(ctx, examId, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, examId, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindQuestionsOrderByUpdateAtDesc'
type MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call struct {
	*mock.Call
}

// FindQuestionsOrderByUpdateAtDesc is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
//   - skip int64
//   - limit int64
func (_e *MockDatabaseRepository_Expecter) FindQuestionsOrderByUpdateAtDesc(ctx interface{}, examId interface{}, skip interface{}, limit interface{}) *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call {
	return &MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call{Call: _e.mock.On("FindQuestionsOrderByUpdateAtDesc", ctx, examId, skip, limit)}
}

func (_c *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call) Run(run func(ctx context.Context, examId string, skip int64, limit int64)) *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call) Return(questions []model.Question, err error) *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call {
	_c.Call.Return(questions, err)
	return _c
}

func (_c *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]model.Question, error)) *MockDatabaseRepository_FindQuestionsOrderByUpdateAtDesc_Call {
	_c.Call.Return(run)
	return _c
}

// GetExam provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) GetExam(ctx context.Context, examId string) (*model.Exam, error) {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for GetExam")
	}

	var r0 *model.Exam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Exam, error)); ok {
		return rf(ctx, examId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Exam); ok {
		r0 = rf(ctx, examId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Exam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_GetExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExam'
type MockDatabaseRepository_GetExam_Call struct {
	*mock.Call
}

// GetExam is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) GetExam(ctx interface{}, examId interface{}) *MockDatabaseRepository_GetExam_Call {
	return &MockDatabaseRepository_GetExam_Call{Call: _e.mock.On("GetExam", ctx, examId)}
}

func (_c *MockDatabaseRepository_GetExam_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_GetExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_GetExam_Call) Return(exam *model.Exam, err error) *MockDatabaseRepository_GetExam_Call {
	_c.Call.Return(exam, err)
	return _c
}

func (_c *MockDatabaseRepository_GetExam_Call) RunAndReturn(run func(context.Context, string) (*model.Exam, error)) *MockDatabaseRepository_GetExam_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestion provides a mock function with given fields: ctx, questionId
func (_m *MockDatabaseRepository) GetQuestion(ctx context.Context, questionId string) (*model.Question, error) {
	ret := _m.Called(ctx, questionId)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestion")
	}

	var r0 *model.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Question, error)); ok {
		return rf(ctx, questionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Question); ok {
		r0 = rf(ctx, questionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, questionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_GetQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestion'
type MockDatabaseRepository_GetQuestion_Call struct {
	*mock.Call
}

// GetQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - questionId string
func (_e *MockDatabaseRepository_Expecter) GetQuestion(ctx interface{}, questionId interface{}) *MockDatabaseRepository_GetQuestion_Call {
	return &MockDatabaseRepository_GetQuestion_Call{Call: _e.mock.On("GetQuestion", ctx, questionId)}
}

func (_c *MockDatabaseRepository_GetQuestion_Call) Run(run func(ctx context.Context, questionId string)) *MockDatabaseRepository_GetQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_GetQuestion_Call) Return(question *model.Question, err error) *MockDatabaseRepository_GetQuestion_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockDatabaseRepository_GetQuestion_Call) RunAndReturn(run func(context.Context, string) (*model.Question, error)) *MockDatabaseRepository_GetQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExam provides a mock function with given fields: ctx, exam
func (_m *MockDatabaseRepository) UpdateExam(ctx context.Context, exam model.Exam) error {
	ret := _m.Called(ctx, exam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Exam) error); ok {
		r0 = rf(ctx, exam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_UpdateExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExam'
type MockDatabaseRepository_UpdateExam_Call struct {
	*mock.Call
}

// UpdateExam is a helper method to define mock.On call
//   - ctx context.Context
//   - exam model.Exam
func (_e *MockDatabaseRepository_Expecter) UpdateExam(ctx interface{}, exam interface{}) *MockDatabaseRepository_UpdateExam_Call {
	return &MockDatabaseRepository_UpdateExam_Call{Call: _e.mock.On("UpdateExam", ctx, exam)}
}

func (_c *MockDatabaseRepository_UpdateExam_Call) Run(run func(ctx context.Context, exam model.Exam)) *MockDatabaseRepository_UpdateExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Exam))
	})
	return _c
}

func (_c *MockDatabaseRepository_UpdateExam_Call) Return(_a0 error) *MockDatabaseRepository_UpdateExam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_UpdateExam_Call) RunAndReturn(run func(context.Context, model.Exam) error) *MockDatabaseRepository_UpdateExam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuestion provides a mock function with given fields: ctx, question
func (_m *MockDatabaseRepository) UpdateQuestion(ctx context.Context, question model.Question) error {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuestion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_UpdateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuestion'
type MockDatabaseRepository_UpdateQuestion_Call struct {
	*mock.Call
}

// UpdateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.Question
func (_e *MockDatabaseRepository_Expecter) UpdateQuestion(ctx interface{}, question interface{}) *MockDatabaseRepository_UpdateQuestion_Call {
	return &MockDatabaseRepository_UpdateQuestion_Call{Call: _e.mock.On("UpdateQuestion", ctx, question)}
}

func (_c *MockDatabaseRepository_UpdateQuestion_Call) Run(run func(ctx context.Context, question model.Question)) *MockDatabaseRepository_UpdateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Question))
	})
	return _c
}

func (_c *MockDatabaseRepository_UpdateQuestion_Call) Return(_a0 error) *MockDatabaseRepository_UpdateQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_UpdateQuestion_Call) RunAndReturn(run func(context.Context, model.Question) error) *MockDatabaseRepository_UpdateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: transactoinFunc
func (_m *MockDatabaseRepository) WithTransaction(transactoinFunc transactionFunc) (interface{}, error) {
	ret := _m.Called(transactoinFunc)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(transactionFunc) (interface{}, error)); ok {
		return rf(transactoinFunc)
	}
	if rf, ok := ret.Get(0).(func(transactionFunc) interface{}); ok {
		r0 = rf(transactoinFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(transactionFunc) error); ok {
		r1 = rf(transactoinFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockDatabaseRepository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - transactoinFunc transactionFunc
func (_e *MockDatabaseRepository_Expecter) WithTransaction(transactoinFunc interface{}) *MockDatabaseRepository_WithTransaction_Call {
	return &MockDatabaseRepository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", transactoinFunc)}
}

func (_c *MockDatabaseRepository_WithTransaction_Call) Run(run func(transactoinFunc transactionFunc)) *MockDatabaseRepository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transactionFunc))
	})
	return _c
}

func (_c *MockDatabaseRepository_WithTransaction_Call) Return(_a0 interface{}, _a1 error) *MockDatabaseRepository_WithTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseRepository_WithTransaction_Call) RunAndReturn(run func(transactionFunc) (interface{}, error)) *MockDatabaseRepository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabaseRepository creates a new instance of MockDatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
