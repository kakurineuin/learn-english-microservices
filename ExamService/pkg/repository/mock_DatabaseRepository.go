// Code generated by mockery v2.39.1. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/kakurineuin/learn-english-microservices/exam-service/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockDatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type MockDatabaseRepository struct {
	mock.Mock
}

type MockDatabaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseRepository) EXPECT() *MockDatabaseRepository_Expecter {
	return &MockDatabaseRepository_Expecter{mock: &_m.Mock}
}

// ConnectDB provides a mock function with given fields: uri
func (_m *MockDatabaseRepository) ConnectDB(uri string) error {
	ret := _m.Called(uri)

	if len(ret) == 0 {
		panic("no return value specified for ConnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uri)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_ConnectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectDB'
type MockDatabaseRepository_ConnectDB_Call struct {
	*mock.Call
}

// ConnectDB is a helper method to define mock.On call
//   - uri string
func (_e *MockDatabaseRepository_Expecter) ConnectDB(uri interface{}) *MockDatabaseRepository_ConnectDB_Call {
	return &MockDatabaseRepository_ConnectDB_Call{Call: _e.mock.On("ConnectDB", uri)}
}

func (_c *MockDatabaseRepository_ConnectDB_Call) Run(run func(uri string)) *MockDatabaseRepository_ConnectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_ConnectDB_Call) Return(_a0 error) *MockDatabaseRepository_ConnectDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_ConnectDB_Call) RunAndReturn(run func(string) error) *MockDatabaseRepository_ConnectDB_Call {
	_c.Call.Return(run)
	return _c
}

// CountExamsByUserId provides a mock function with given fields: ctx, userId
func (_m *MockDatabaseRepository) CountExamsByUserId(ctx context.Context, userId string) (int64, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for CountExamsByUserId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CountExamsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountExamsByUserId'
type MockDatabaseRepository_CountExamsByUserId_Call struct {
	*mock.Call
}

// CountExamsByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockDatabaseRepository_Expecter) CountExamsByUserId(ctx interface{}, userId interface{}) *MockDatabaseRepository_CountExamsByUserId_Call {
	return &MockDatabaseRepository_CountExamsByUserId_Call{Call: _e.mock.On("CountExamsByUserId", ctx, userId)}
}

func (_c *MockDatabaseRepository_CountExamsByUserId_Call) Run(run func(ctx context.Context, userId string)) *MockDatabaseRepository_CountExamsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_CountExamsByUserId_Call) Return(count int64, err error) *MockDatabaseRepository_CountExamsByUserId_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *MockDatabaseRepository_CountExamsByUserId_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_CountExamsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// CountQuestionsByExamIdAndUserId provides a mock function with given fields: ctx, examId, userId
func (_m *MockDatabaseRepository) CountQuestionsByExamIdAndUserId(ctx context.Context, examId string, userId string) (int64, error) {
	ret := _m.Called(ctx, examId, userId)

	if len(ret) == 0 {
		panic("no return value specified for CountQuestionsByExamIdAndUserId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, examId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, examId, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, examId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountQuestionsByExamIdAndUserId'
type MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call struct {
	*mock.Call
}

// CountQuestionsByExamIdAndUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
//   - userId string
func (_e *MockDatabaseRepository_Expecter) CountQuestionsByExamIdAndUserId(ctx interface{}, examId interface{}, userId interface{}) *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call {
	return &MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call{Call: _e.mock.On("CountQuestionsByExamIdAndUserId", ctx, examId, userId)}
}

func (_c *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call) Run(run func(ctx context.Context, examId string, userId string)) *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call) Return(count int64, err error) *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call) RunAndReturn(run func(context.Context, string, string) (int64, error)) *MockDatabaseRepository_CountQuestionsByExamIdAndUserId_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExam provides a mock function with given fields: ctx, exam
func (_m *MockDatabaseRepository) CreateExam(ctx context.Context, exam model.Exam) (string, error) {
	ret := _m.Called(ctx, exam)

	if len(ret) == 0 {
		panic("no return value specified for CreateExam")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Exam) (string, error)); ok {
		return rf(ctx, exam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Exam) string); ok {
		r0 = rf(ctx, exam)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Exam) error); ok {
		r1 = rf(ctx, exam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CreateExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExam'
type MockDatabaseRepository_CreateExam_Call struct {
	*mock.Call
}

// CreateExam is a helper method to define mock.On call
//   - ctx context.Context
//   - exam model.Exam
func (_e *MockDatabaseRepository_Expecter) CreateExam(ctx interface{}, exam interface{}) *MockDatabaseRepository_CreateExam_Call {
	return &MockDatabaseRepository_CreateExam_Call{Call: _e.mock.On("CreateExam", ctx, exam)}
}

func (_c *MockDatabaseRepository_CreateExam_Call) Run(run func(ctx context.Context, exam model.Exam)) *MockDatabaseRepository_CreateExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Exam))
	})
	return _c
}

func (_c *MockDatabaseRepository_CreateExam_Call) Return(examId string, err error) *MockDatabaseRepository_CreateExam_Call {
	_c.Call.Return(examId, err)
	return _c
}

func (_c *MockDatabaseRepository_CreateExam_Call) RunAndReturn(run func(context.Context, model.Exam) (string, error)) *MockDatabaseRepository_CreateExam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExamRecord provides a mock function with given fields: ctx, examRecord
func (_m *MockDatabaseRepository) CreateExamRecord(ctx context.Context, examRecord model.ExamRecord) (string, error) {
	ret := _m.Called(ctx, examRecord)

	if len(ret) == 0 {
		panic("no return value specified for CreateExamRecord")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ExamRecord) (string, error)); ok {
		return rf(ctx, examRecord)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ExamRecord) string); ok {
		r0 = rf(ctx, examRecord)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ExamRecord) error); ok {
		r1 = rf(ctx, examRecord)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CreateExamRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExamRecord'
type MockDatabaseRepository_CreateExamRecord_Call struct {
	*mock.Call
}

// CreateExamRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - examRecord model.ExamRecord
func (_e *MockDatabaseRepository_Expecter) CreateExamRecord(ctx interface{}, examRecord interface{}) *MockDatabaseRepository_CreateExamRecord_Call {
	return &MockDatabaseRepository_CreateExamRecord_Call{Call: _e.mock.On("CreateExamRecord", ctx, examRecord)}
}

func (_c *MockDatabaseRepository_CreateExamRecord_Call) Run(run func(ctx context.Context, examRecord model.ExamRecord)) *MockDatabaseRepository_CreateExamRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ExamRecord))
	})
	return _c
}

func (_c *MockDatabaseRepository_CreateExamRecord_Call) Return(examRecordId string, err error) *MockDatabaseRepository_CreateExamRecord_Call {
	_c.Call.Return(examRecordId, err)
	return _c
}

func (_c *MockDatabaseRepository_CreateExamRecord_Call) RunAndReturn(run func(context.Context, model.ExamRecord) (string, error)) *MockDatabaseRepository_CreateExamRecord_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuestion provides a mock function with given fields: ctx, question
func (_m *MockDatabaseRepository) CreateQuestion(ctx context.Context, question model.Question) (string, error) {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuestion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) (string, error)); ok {
		return rf(ctx, question)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) string); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Question) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type MockDatabaseRepository_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.Question
func (_e *MockDatabaseRepository_Expecter) CreateQuestion(ctx interface{}, question interface{}) *MockDatabaseRepository_CreateQuestion_Call {
	return &MockDatabaseRepository_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", ctx, question)}
}

func (_c *MockDatabaseRepository_CreateQuestion_Call) Run(run func(ctx context.Context, question model.Question)) *MockDatabaseRepository_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Question))
	})
	return _c
}

func (_c *MockDatabaseRepository_CreateQuestion_Call) Return(questionId string, err error) *MockDatabaseRepository_CreateQuestion_Call {
	_c.Call.Return(questionId, err)
	return _c
}

func (_c *MockDatabaseRepository_CreateQuestion_Call) RunAndReturn(run func(context.Context, model.Question) (string, error)) *MockDatabaseRepository_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAnswerWrongsByExamId provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) DeleteAnswerWrongsByExamId(ctx context.Context, examId string) (int64, error) {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnswerWrongsByExamId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, examId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, examId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnswerWrongsByExamId'
type MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call struct {
	*mock.Call
}

// DeleteAnswerWrongsByExamId is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) DeleteAnswerWrongsByExamId(ctx interface{}, examId interface{}) *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call {
	return &MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call{Call: _e.mock.On("DeleteAnswerWrongsByExamId", ctx, examId)}
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call) Return(deletedCount int64, err error) *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call {
	_c.Call.Return(deletedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_DeleteAnswerWrongsByExamId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAnswerWrongsByQuestionId provides a mock function with given fields: ctx, questionId
func (_m *MockDatabaseRepository) DeleteAnswerWrongsByQuestionId(ctx context.Context, questionId string) (int64, error) {
	ret := _m.Called(ctx, questionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnswerWrongsByQuestionId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, questionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, questionId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, questionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnswerWrongsByQuestionId'
type MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call struct {
	*mock.Call
}

// DeleteAnswerWrongsByQuestionId is a helper method to define mock.On call
//   - ctx context.Context
//   - questionId string
func (_e *MockDatabaseRepository_Expecter) DeleteAnswerWrongsByQuestionId(ctx interface{}, questionId interface{}) *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call {
	return &MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call{Call: _e.mock.On("DeleteAnswerWrongsByQuestionId", ctx, questionId)}
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call) Run(run func(ctx context.Context, questionId string)) *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call) Return(deletedCount int64, err error) *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call {
	_c.Call.Return(deletedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_DeleteAnswerWrongsByQuestionId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExamById provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) DeleteExamById(ctx context.Context, examId string) (int64, error) {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExamById")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, examId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, examId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_DeleteExamById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExamById'
type MockDatabaseRepository_DeleteExamById_Call struct {
	*mock.Call
}

// DeleteExamById is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) DeleteExamById(ctx interface{}, examId interface{}) *MockDatabaseRepository_DeleteExamById_Call {
	return &MockDatabaseRepository_DeleteExamById_Call{Call: _e.mock.On("DeleteExamById", ctx, examId)}
}

func (_c *MockDatabaseRepository_DeleteExamById_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_DeleteExamById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteExamById_Call) Return(deletedCount int64, err error) *MockDatabaseRepository_DeleteExamById_Call {
	_c.Call.Return(deletedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_DeleteExamById_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_DeleteExamById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExamRecordsByExamId provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) DeleteExamRecordsByExamId(ctx context.Context, examId string) (int64, error) {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExamRecordsByExamId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, examId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, examId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_DeleteExamRecordsByExamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExamRecordsByExamId'
type MockDatabaseRepository_DeleteExamRecordsByExamId_Call struct {
	*mock.Call
}

// DeleteExamRecordsByExamId is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) DeleteExamRecordsByExamId(ctx interface{}, examId interface{}) *MockDatabaseRepository_DeleteExamRecordsByExamId_Call {
	return &MockDatabaseRepository_DeleteExamRecordsByExamId_Call{Call: _e.mock.On("DeleteExamRecordsByExamId", ctx, examId)}
}

func (_c *MockDatabaseRepository_DeleteExamRecordsByExamId_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_DeleteExamRecordsByExamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteExamRecordsByExamId_Call) Return(deletedCount int64, err error) *MockDatabaseRepository_DeleteExamRecordsByExamId_Call {
	_c.Call.Return(deletedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_DeleteExamRecordsByExamId_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_DeleteExamRecordsByExamId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuestionById provides a mock function with given fields: ctx, questionId
func (_m *MockDatabaseRepository) DeleteQuestionById(ctx context.Context, questionId string) (int64, error) {
	ret := _m.Called(ctx, questionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuestionById")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, questionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, questionId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, questionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_DeleteQuestionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuestionById'
type MockDatabaseRepository_DeleteQuestionById_Call struct {
	*mock.Call
}

// DeleteQuestionById is a helper method to define mock.On call
//   - ctx context.Context
//   - questionId string
func (_e *MockDatabaseRepository_Expecter) DeleteQuestionById(ctx interface{}, questionId interface{}) *MockDatabaseRepository_DeleteQuestionById_Call {
	return &MockDatabaseRepository_DeleteQuestionById_Call{Call: _e.mock.On("DeleteQuestionById", ctx, questionId)}
}

func (_c *MockDatabaseRepository_DeleteQuestionById_Call) Run(run func(ctx context.Context, questionId string)) *MockDatabaseRepository_DeleteQuestionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestionById_Call) Return(deletedCount int64, err error) *MockDatabaseRepository_DeleteQuestionById_Call {
	_c.Call.Return(deletedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestionById_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_DeleteQuestionById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQuestionsByExamId provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) DeleteQuestionsByExamId(ctx context.Context, examId string) (int64, error) {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuestionsByExamId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, examId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, examId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_DeleteQuestionsByExamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQuestionsByExamId'
type MockDatabaseRepository_DeleteQuestionsByExamId_Call struct {
	*mock.Call
}

// DeleteQuestionsByExamId is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) DeleteQuestionsByExamId(ctx interface{}, examId interface{}) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	return &MockDatabaseRepository_DeleteQuestionsByExamId_Call{Call: _e.mock.On("DeleteQuestionsByExamId", ctx, examId)}
}

func (_c *MockDatabaseRepository_DeleteQuestionsByExamId_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestionsByExamId_Call) Return(deletedCount int64, err error) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	_c.Call.Return(deletedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_DeleteQuestionsByExamId_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockDatabaseRepository_DeleteQuestionsByExamId_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectDB provides a mock function with given fields:
func (_m *MockDatabaseRepository) DisconnectDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisconnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_DisconnectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectDB'
type MockDatabaseRepository_DisconnectDB_Call struct {
	*mock.Call
}

// DisconnectDB is a helper method to define mock.On call
func (_e *MockDatabaseRepository_Expecter) DisconnectDB() *MockDatabaseRepository_DisconnectDB_Call {
	return &MockDatabaseRepository_DisconnectDB_Call{Call: _e.mock.On("DisconnectDB")}
}

func (_c *MockDatabaseRepository_DisconnectDB_Call) Run(run func()) *MockDatabaseRepository_DisconnectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabaseRepository_DisconnectDB_Call) Return(_a0 error) *MockDatabaseRepository_DisconnectDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_DisconnectDB_Call) RunAndReturn(run func() error) *MockDatabaseRepository_DisconnectDB_Call {
	_c.Call.Return(run)
	return _c
}

// FindExamsByUserIdOrderByUpdateAtDesc provides a mock function with given fields: ctx, userId, skip, limit
func (_m *MockDatabaseRepository) FindExamsByUserIdOrderByUpdateAtDesc(ctx context.Context, userId string, skip int64, limit int64) ([]model.Exam, error) {
	ret := _m.Called(ctx, userId, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindExamsByUserIdOrderByUpdateAtDesc")
	}

	var r0 []model.Exam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]model.Exam, error)); ok {
		return rf(ctx, userId, skip, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []model.Exam); ok {
		r0 = rf(ctx, userId, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Exam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, userId, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindExamsByUserIdOrderByUpdateAtDesc'
type MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call struct {
	*mock.Call
}

// FindExamsByUserIdOrderByUpdateAtDesc is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - skip int64
//   - limit int64
func (_e *MockDatabaseRepository_Expecter) FindExamsByUserIdOrderByUpdateAtDesc(ctx interface{}, userId interface{}, skip interface{}, limit interface{}) *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call {
	return &MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call{Call: _e.mock.On("FindExamsByUserIdOrderByUpdateAtDesc", ctx, userId, skip, limit)}
}

func (_c *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call) Run(run func(ctx context.Context, userId string, skip int64, limit int64)) *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call) Return(exams []model.Exam, err error) *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call {
	_c.Call.Return(exams, err)
	return _c
}

func (_c *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]model.Exam, error)) *MockDatabaseRepository_FindExamsByUserIdOrderByUpdateAtDesc_Call {
	_c.Call.Return(run)
	return _c
}

// FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc provides a mock function with given fields: ctx, examId, userId, skip, limit
func (_m *MockDatabaseRepository) FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc(ctx context.Context, examId string, userId string, skip int64, limit int64) ([]model.Question, error) {
	ret := _m.Called(ctx, examId, userId, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc")
	}

	var r0 []model.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) ([]model.Question, error)); ok {
		return rf(ctx, examId, userId, skip, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) []model.Question); ok {
		r0 = rf(ctx, examId, userId, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, examId, userId, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc'
type MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call struct {
	*mock.Call
}

// FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
//   - userId string
//   - skip int64
//   - limit int64
func (_e *MockDatabaseRepository_Expecter) FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc(ctx interface{}, examId interface{}, userId interface{}, skip interface{}, limit interface{}) *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call {
	return &MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call{Call: _e.mock.On("FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc", ctx, examId, userId, skip, limit)}
}

func (_c *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call) Run(run func(ctx context.Context, examId string, userId string, skip int64, limit int64)) *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call) Return(questions []model.Question, err error) *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call {
	_c.Call.Return(questions, err)
	return _c
}

func (_c *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call) RunAndReturn(run func(context.Context, string, string, int64, int64) ([]model.Question, error)) *MockDatabaseRepository_FindQuestionsByExamIdAndUserIdOrderByUpdateAtDesc_Call {
	_c.Call.Return(run)
	return _c
}

// GetExamById provides a mock function with given fields: ctx, examId
func (_m *MockDatabaseRepository) GetExamById(ctx context.Context, examId string) (*model.Exam, error) {
	ret := _m.Called(ctx, examId)

	if len(ret) == 0 {
		panic("no return value specified for GetExamById")
	}

	var r0 *model.Exam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Exam, error)); ok {
		return rf(ctx, examId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Exam); ok {
		r0 = rf(ctx, examId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Exam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_GetExamById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExamById'
type MockDatabaseRepository_GetExamById_Call struct {
	*mock.Call
}

// GetExamById is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
func (_e *MockDatabaseRepository_Expecter) GetExamById(ctx interface{}, examId interface{}) *MockDatabaseRepository_GetExamById_Call {
	return &MockDatabaseRepository_GetExamById_Call{Call: _e.mock.On("GetExamById", ctx, examId)}
}

func (_c *MockDatabaseRepository_GetExamById_Call) Run(run func(ctx context.Context, examId string)) *MockDatabaseRepository_GetExamById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_GetExamById_Call) Return(exam *model.Exam, err error) *MockDatabaseRepository_GetExamById_Call {
	_c.Call.Return(exam, err)
	return _c
}

func (_c *MockDatabaseRepository_GetExamById_Call) RunAndReturn(run func(context.Context, string) (*model.Exam, error)) *MockDatabaseRepository_GetExamById_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionById provides a mock function with given fields: ctx, questionId
func (_m *MockDatabaseRepository) GetQuestionById(ctx context.Context, questionId string) (*model.Question, error) {
	ret := _m.Called(ctx, questionId)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestionById")
	}

	var r0 *model.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Question, error)); ok {
		return rf(ctx, questionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Question); ok {
		r0 = rf(ctx, questionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, questionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_GetQuestionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionById'
type MockDatabaseRepository_GetQuestionById_Call struct {
	*mock.Call
}

// GetQuestionById is a helper method to define mock.On call
//   - ctx context.Context
//   - questionId string
func (_e *MockDatabaseRepository_Expecter) GetQuestionById(ctx interface{}, questionId interface{}) *MockDatabaseRepository_GetQuestionById_Call {
	return &MockDatabaseRepository_GetQuestionById_Call{Call: _e.mock.On("GetQuestionById", ctx, questionId)}
}

func (_c *MockDatabaseRepository_GetQuestionById_Call) Run(run func(ctx context.Context, questionId string)) *MockDatabaseRepository_GetQuestionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_GetQuestionById_Call) Return(question *model.Question, err error) *MockDatabaseRepository_GetQuestionById_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockDatabaseRepository_GetQuestionById_Call) RunAndReturn(run func(context.Context, string) (*model.Question, error)) *MockDatabaseRepository_GetQuestionById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExam provides a mock function with given fields: ctx, exam
func (_m *MockDatabaseRepository) UpdateExam(ctx context.Context, exam model.Exam) error {
	ret := _m.Called(ctx, exam)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Exam) error); ok {
		r0 = rf(ctx, exam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_UpdateExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExam'
type MockDatabaseRepository_UpdateExam_Call struct {
	*mock.Call
}

// UpdateExam is a helper method to define mock.On call
//   - ctx context.Context
//   - exam model.Exam
func (_e *MockDatabaseRepository_Expecter) UpdateExam(ctx interface{}, exam interface{}) *MockDatabaseRepository_UpdateExam_Call {
	return &MockDatabaseRepository_UpdateExam_Call{Call: _e.mock.On("UpdateExam", ctx, exam)}
}

func (_c *MockDatabaseRepository_UpdateExam_Call) Run(run func(ctx context.Context, exam model.Exam)) *MockDatabaseRepository_UpdateExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Exam))
	})
	return _c
}

func (_c *MockDatabaseRepository_UpdateExam_Call) Return(_a0 error) *MockDatabaseRepository_UpdateExam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_UpdateExam_Call) RunAndReturn(run func(context.Context, model.Exam) error) *MockDatabaseRepository_UpdateExam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuestion provides a mock function with given fields: ctx, question
func (_m *MockDatabaseRepository) UpdateQuestion(ctx context.Context, question model.Question) error {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuestion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseRepository_UpdateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuestion'
type MockDatabaseRepository_UpdateQuestion_Call struct {
	*mock.Call
}

// UpdateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - question model.Question
func (_e *MockDatabaseRepository_Expecter) UpdateQuestion(ctx interface{}, question interface{}) *MockDatabaseRepository_UpdateQuestion_Call {
	return &MockDatabaseRepository_UpdateQuestion_Call{Call: _e.mock.On("UpdateQuestion", ctx, question)}
}

func (_c *MockDatabaseRepository_UpdateQuestion_Call) Run(run func(ctx context.Context, question model.Question)) *MockDatabaseRepository_UpdateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Question))
	})
	return _c
}

func (_c *MockDatabaseRepository_UpdateQuestion_Call) Return(_a0 error) *MockDatabaseRepository_UpdateQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseRepository_UpdateQuestion_Call) RunAndReturn(run func(context.Context, model.Question) error) *MockDatabaseRepository_UpdateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertAnswerWrongByTimesPlusOne provides a mock function with given fields: ctx, examId, questionId, userId
func (_m *MockDatabaseRepository) UpsertAnswerWrongByTimesPlusOne(ctx context.Context, examId string, questionId string, userId string) (int64, int64, error) {
	ret := _m.Called(ctx, examId, questionId, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAnswerWrongByTimesPlusOne")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, int64, error)); ok {
		return rf(ctx, examId, questionId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, examId, questionId, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) int64); ok {
		r1 = rf(ctx, examId, questionId, userId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, examId, questionId, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertAnswerWrongByTimesPlusOne'
type MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call struct {
	*mock.Call
}

// UpsertAnswerWrongByTimesPlusOne is a helper method to define mock.On call
//   - ctx context.Context
//   - examId string
//   - questionId string
//   - userId string
func (_e *MockDatabaseRepository_Expecter) UpsertAnswerWrongByTimesPlusOne(ctx interface{}, examId interface{}, questionId interface{}, userId interface{}) *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call {
	return &MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call{Call: _e.mock.On("UpsertAnswerWrongByTimesPlusOne", ctx, examId, questionId, userId)}
}

func (_c *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call) Run(run func(ctx context.Context, examId string, questionId string, userId string)) *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call) Return(modifiedCount int64, upsertedCount int64, err error) *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call {
	_c.Call.Return(modifiedCount, upsertedCount, err)
	return _c
}

func (_c *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call) RunAndReturn(run func(context.Context, string, string, string) (int64, int64, error)) *MockDatabaseRepository_UpsertAnswerWrongByTimesPlusOne_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: transactoinFunc
func (_m *MockDatabaseRepository) WithTransaction(transactoinFunc transactionFunc) (interface{}, error) {
	ret := _m.Called(transactoinFunc)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(transactionFunc) (interface{}, error)); ok {
		return rf(transactoinFunc)
	}
	if rf, ok := ret.Get(0).(func(transactionFunc) interface{}); ok {
		r0 = rf(transactoinFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(transactionFunc) error); ok {
		r1 = rf(transactoinFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockDatabaseRepository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - transactoinFunc transactionFunc
func (_e *MockDatabaseRepository_Expecter) WithTransaction(transactoinFunc interface{}) *MockDatabaseRepository_WithTransaction_Call {
	return &MockDatabaseRepository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", transactoinFunc)}
}

func (_c *MockDatabaseRepository_WithTransaction_Call) Run(run func(transactoinFunc transactionFunc)) *MockDatabaseRepository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transactionFunc))
	})
	return _c
}

func (_c *MockDatabaseRepository_WithTransaction_Call) Return(_a0 interface{}, _a1 error) *MockDatabaseRepository_WithTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseRepository_WithTransaction_Call) RunAndReturn(run func(transactionFunc) (interface{}, error)) *MockDatabaseRepository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabaseRepository creates a new instance of MockDatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
