// Code generated by mockery v2.39.1. DO NOT EDIT.

package examservice

import (
	pb "github.com/kakurineuin/learn-english-microservices/web-service/pb"
	mock "github.com/stretchr/testify/mock"
)

// MockExamService is an autogenerated mock type for the ExamService type
type MockExamService struct {
	mock.Mock
}

type MockExamService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExamService) EXPECT() *MockExamService_Expecter {
	return &MockExamService_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields:
func (_m *MockExamService) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExamService_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockExamService_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockExamService_Expecter) Connect() *MockExamService_Connect_Call {
	return &MockExamService_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockExamService_Connect_Call) Run(run func()) *MockExamService_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExamService_Connect_Call) Return(_a0 error) *MockExamService_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExamService_Connect_Call) RunAndReturn(run func() error) *MockExamService_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExam provides a mock function with given fields: topic, description, isPublic, userId
func (_m *MockExamService) CreateExam(topic string, description string, isPublic bool, userId string) (*pb.CreateExamResponse, error) {
	ret := _m.Called(topic, description, isPublic, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateExam")
	}

	var r0 *pb.CreateExamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool, string) (*pb.CreateExamResponse, error)); ok {
		return rf(topic, description, isPublic, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, string) *pb.CreateExamResponse); ok {
		r0 = rf(topic, description, isPublic, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateExamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, string) error); ok {
		r1 = rf(topic, description, isPublic, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExamService_CreateExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExam'
type MockExamService_CreateExam_Call struct {
	*mock.Call
}

// CreateExam is a helper method to define mock.On call
//   - topic string
//   - description string
//   - isPublic bool
//   - userId string
func (_e *MockExamService_Expecter) CreateExam(topic interface{}, description interface{}, isPublic interface{}, userId interface{}) *MockExamService_CreateExam_Call {
	return &MockExamService_CreateExam_Call{Call: _e.mock.On("CreateExam", topic, description, isPublic, userId)}
}

func (_c *MockExamService_CreateExam_Call) Run(run func(topic string, description string, isPublic bool, userId string)) *MockExamService_CreateExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(string))
	})
	return _c
}

func (_c *MockExamService_CreateExam_Call) Return(_a0 *pb.CreateExamResponse, _a1 error) *MockExamService_CreateExam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExamService_CreateExam_Call) RunAndReturn(run func(string, string, bool, string) (*pb.CreateExamResponse, error)) *MockExamService_CreateExam_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields:
func (_m *MockExamService) Disconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExamService_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockExamService_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *MockExamService_Expecter) Disconnect() *MockExamService_Disconnect_Call {
	return &MockExamService_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *MockExamService_Disconnect_Call) Run(run func()) *MockExamService_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExamService_Disconnect_Call) Return(_a0 error) *MockExamService_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExamService_Disconnect_Call) RunAndReturn(run func() error) *MockExamService_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// FindExams provides a mock function with given fields: pageIndex, pageSize, userId
func (_m *MockExamService) FindExams(pageIndex int32, pageSize int32, userId string) (*pb.FindExamsResponse, error) {
	ret := _m.Called(pageIndex, pageSize, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindExams")
	}

	var r0 *pb.FindExamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string) (*pb.FindExamsResponse, error)); ok {
		return rf(pageIndex, pageSize, userId)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string) *pb.FindExamsResponse); ok {
		r0 = rf(pageIndex, pageSize, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FindExamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string) error); ok {
		r1 = rf(pageIndex, pageSize, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExamService_FindExams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindExams'
type MockExamService_FindExams_Call struct {
	*mock.Call
}

// FindExams is a helper method to define mock.On call
//   - pageIndex int32
//   - pageSize int32
//   - userId string
func (_e *MockExamService_Expecter) FindExams(pageIndex interface{}, pageSize interface{}, userId interface{}) *MockExamService_FindExams_Call {
	return &MockExamService_FindExams_Call{Call: _e.mock.On("FindExams", pageIndex, pageSize, userId)}
}

func (_c *MockExamService_FindExams_Call) Run(run func(pageIndex int32, pageSize int32, userId string)) *MockExamService_FindExams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *MockExamService_FindExams_Call) Return(_a0 *pb.FindExamsResponse, _a1 error) *MockExamService_FindExams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExamService_FindExams_Call) RunAndReturn(run func(int32, int32, string) (*pb.FindExamsResponse, error)) *MockExamService_FindExams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExam provides a mock function with given fields: examId, topic, description, isPublic, userId
func (_m *MockExamService) UpdateExam(examId string, topic string, description string, isPublic bool, userId string) (*pb.UpdateExamResponse, error) {
	ret := _m.Called(examId, topic, description, isPublic, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExam")
	}

	var r0 *pb.UpdateExamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, string) (*pb.UpdateExamResponse, error)); ok {
		return rf(examId, topic, description, isPublic, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, bool, string) *pb.UpdateExamResponse); ok {
		r0 = rf(examId, topic, description, isPublic, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateExamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, bool, string) error); ok {
		r1 = rf(examId, topic, description, isPublic, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExamService_UpdateExam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExam'
type MockExamService_UpdateExam_Call struct {
	*mock.Call
}

// UpdateExam is a helper method to define mock.On call
//   - examId string
//   - topic string
//   - description string
//   - isPublic bool
//   - userId string
func (_e *MockExamService_Expecter) UpdateExam(examId interface{}, topic interface{}, description interface{}, isPublic interface{}, userId interface{}) *MockExamService_UpdateExam_Call {
	return &MockExamService_UpdateExam_Call{Call: _e.mock.On("UpdateExam", examId, topic, description, isPublic, userId)}
}

func (_c *MockExamService_UpdateExam_Call) Run(run func(examId string, topic string, description string, isPublic bool, userId string)) *MockExamService_UpdateExam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(bool), args[4].(string))
	})
	return _c
}

func (_c *MockExamService_UpdateExam_Call) Return(_a0 *pb.UpdateExamResponse, _a1 error) *MockExamService_UpdateExam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExamService_UpdateExam_Call) RunAndReturn(run func(string, string, string, bool, string) (*pb.UpdateExamResponse, error)) *MockExamService_UpdateExam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExamService creates a new instance of MockExamService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExamService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExamService {
	mock := &MockExamService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
