// Code generated by mockery v2.39.1. DO NOT EDIT.

package wordservice

import (
	pb "github.com/kakurineuin/learn-english-microservices/web-service/pb"
	mock "github.com/stretchr/testify/mock"
)

// MockWordService is an autogenerated mock type for the WordService type
type MockWordService struct {
	mock.Mock
}

type MockWordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWordService) EXPECT() *MockWordService_Expecter {
	return &MockWordService_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields:
func (_m *MockWordService) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWordService_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockWordService_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockWordService_Expecter) Connect() *MockWordService_Connect_Call {
	return &MockWordService_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockWordService_Connect_Call) Run(run func()) *MockWordService_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWordService_Connect_Call) Return(_a0 error) *MockWordService_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWordService_Connect_Call) RunAndReturn(run func() error) *MockWordService_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFavoriteWordMeaning provides a mock function with given fields: userId, wordMeaningId
func (_m *MockWordService) CreateFavoriteWordMeaning(userId string, wordMeaningId string) (*pb.CreateFavoriteWordMeaningResponse, error) {
	ret := _m.Called(userId, wordMeaningId)

	if len(ret) == 0 {
		panic("no return value specified for CreateFavoriteWordMeaning")
	}

	var r0 *pb.CreateFavoriteWordMeaningResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pb.CreateFavoriteWordMeaningResponse, error)); ok {
		return rf(userId, wordMeaningId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pb.CreateFavoriteWordMeaningResponse); ok {
		r0 = rf(userId, wordMeaningId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateFavoriteWordMeaningResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, wordMeaningId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordService_CreateFavoriteWordMeaning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFavoriteWordMeaning'
type MockWordService_CreateFavoriteWordMeaning_Call struct {
	*mock.Call
}

// CreateFavoriteWordMeaning is a helper method to define mock.On call
//   - userId string
//   - wordMeaningId string
func (_e *MockWordService_Expecter) CreateFavoriteWordMeaning(userId interface{}, wordMeaningId interface{}) *MockWordService_CreateFavoriteWordMeaning_Call {
	return &MockWordService_CreateFavoriteWordMeaning_Call{Call: _e.mock.On("CreateFavoriteWordMeaning", userId, wordMeaningId)}
}

func (_c *MockWordService_CreateFavoriteWordMeaning_Call) Run(run func(userId string, wordMeaningId string)) *MockWordService_CreateFavoriteWordMeaning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockWordService_CreateFavoriteWordMeaning_Call) Return(_a0 *pb.CreateFavoriteWordMeaningResponse, _a1 error) *MockWordService_CreateFavoriteWordMeaning_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordService_CreateFavoriteWordMeaning_Call) RunAndReturn(run func(string, string) (*pb.CreateFavoriteWordMeaningResponse, error)) *MockWordService_CreateFavoriteWordMeaning_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFavoriteWordMeaning provides a mock function with given fields: favoriteWordMeaningId, userId
func (_m *MockWordService) DeleteFavoriteWordMeaning(favoriteWordMeaningId string, userId string) (*pb.DeleteFavoriteWordMeaningResponse, error) {
	ret := _m.Called(favoriteWordMeaningId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFavoriteWordMeaning")
	}

	var r0 *pb.DeleteFavoriteWordMeaningResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pb.DeleteFavoriteWordMeaningResponse, error)); ok {
		return rf(favoriteWordMeaningId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pb.DeleteFavoriteWordMeaningResponse); ok {
		r0 = rf(favoriteWordMeaningId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteFavoriteWordMeaningResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(favoriteWordMeaningId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordService_DeleteFavoriteWordMeaning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFavoriteWordMeaning'
type MockWordService_DeleteFavoriteWordMeaning_Call struct {
	*mock.Call
}

// DeleteFavoriteWordMeaning is a helper method to define mock.On call
//   - favoriteWordMeaningId string
//   - userId string
func (_e *MockWordService_Expecter) DeleteFavoriteWordMeaning(favoriteWordMeaningId interface{}, userId interface{}) *MockWordService_DeleteFavoriteWordMeaning_Call {
	return &MockWordService_DeleteFavoriteWordMeaning_Call{Call: _e.mock.On("DeleteFavoriteWordMeaning", favoriteWordMeaningId, userId)}
}

func (_c *MockWordService_DeleteFavoriteWordMeaning_Call) Run(run func(favoriteWordMeaningId string, userId string)) *MockWordService_DeleteFavoriteWordMeaning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockWordService_DeleteFavoriteWordMeaning_Call) Return(_a0 *pb.DeleteFavoriteWordMeaningResponse, _a1 error) *MockWordService_DeleteFavoriteWordMeaning_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordService_DeleteFavoriteWordMeaning_Call) RunAndReturn(run func(string, string) (*pb.DeleteFavoriteWordMeaningResponse, error)) *MockWordService_DeleteFavoriteWordMeaning_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields:
func (_m *MockWordService) Disconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWordService_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockWordService_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *MockWordService_Expecter) Disconnect() *MockWordService_Disconnect_Call {
	return &MockWordService_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *MockWordService_Disconnect_Call) Run(run func()) *MockWordService_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWordService_Disconnect_Call) Return(_a0 error) *MockWordService_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWordService_Disconnect_Call) RunAndReturn(run func() error) *MockWordService_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// FindFavoriteWordMeanings provides a mock function with given fields: pageIndex, pageSize, userId, word
func (_m *MockWordService) FindFavoriteWordMeanings(pageIndex int32, pageSize int32, userId string, word string) (*pb.FindFavoriteWordMeaningsResponse, error) {
	ret := _m.Called(pageIndex, pageSize, userId, word)

	if len(ret) == 0 {
		panic("no return value specified for FindFavoriteWordMeanings")
	}

	var r0 *pb.FindFavoriteWordMeaningsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, string) (*pb.FindFavoriteWordMeaningsResponse, error)); ok {
		return rf(pageIndex, pageSize, userId, word)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, string) *pb.FindFavoriteWordMeaningsResponse); ok {
		r0 = rf(pageIndex, pageSize, userId, word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FindFavoriteWordMeaningsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, string) error); ok {
		r1 = rf(pageIndex, pageSize, userId, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordService_FindFavoriteWordMeanings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindFavoriteWordMeanings'
type MockWordService_FindFavoriteWordMeanings_Call struct {
	*mock.Call
}

// FindFavoriteWordMeanings is a helper method to define mock.On call
//   - pageIndex int32
//   - pageSize int32
//   - userId string
//   - word string
func (_e *MockWordService_Expecter) FindFavoriteWordMeanings(pageIndex interface{}, pageSize interface{}, userId interface{}, word interface{}) *MockWordService_FindFavoriteWordMeanings_Call {
	return &MockWordService_FindFavoriteWordMeanings_Call{Call: _e.mock.On("FindFavoriteWordMeanings", pageIndex, pageSize, userId, word)}
}

func (_c *MockWordService_FindFavoriteWordMeanings_Call) Run(run func(pageIndex int32, pageSize int32, userId string, word string)) *MockWordService_FindFavoriteWordMeanings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockWordService_FindFavoriteWordMeanings_Call) Return(_a0 *pb.FindFavoriteWordMeaningsResponse, _a1 error) *MockWordService_FindFavoriteWordMeanings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordService_FindFavoriteWordMeanings_Call) RunAndReturn(run func(int32, int32, string, string) (*pb.FindFavoriteWordMeaningsResponse, error)) *MockWordService_FindFavoriteWordMeanings_Call {
	_c.Call.Return(run)
	return _c
}

// FindRandomFavoriteWordMeanings provides a mock function with given fields: userId, size
func (_m *MockWordService) FindRandomFavoriteWordMeanings(userId string, size int32) (*pb.FindRandomFavoriteWordMeaningsResponse, error) {
	ret := _m.Called(userId, size)

	if len(ret) == 0 {
		panic("no return value specified for FindRandomFavoriteWordMeanings")
	}

	var r0 *pb.FindRandomFavoriteWordMeaningsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int32) (*pb.FindRandomFavoriteWordMeaningsResponse, error)); ok {
		return rf(userId, size)
	}
	if rf, ok := ret.Get(0).(func(string, int32) *pb.FindRandomFavoriteWordMeaningsResponse); ok {
		r0 = rf(userId, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FindRandomFavoriteWordMeaningsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(userId, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordService_FindRandomFavoriteWordMeanings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRandomFavoriteWordMeanings'
type MockWordService_FindRandomFavoriteWordMeanings_Call struct {
	*mock.Call
}

// FindRandomFavoriteWordMeanings is a helper method to define mock.On call
//   - userId string
//   - size int32
func (_e *MockWordService_Expecter) FindRandomFavoriteWordMeanings(userId interface{}, size interface{}) *MockWordService_FindRandomFavoriteWordMeanings_Call {
	return &MockWordService_FindRandomFavoriteWordMeanings_Call{Call: _e.mock.On("FindRandomFavoriteWordMeanings", userId, size)}
}

func (_c *MockWordService_FindRandomFavoriteWordMeanings_Call) Run(run func(userId string, size int32)) *MockWordService_FindRandomFavoriteWordMeanings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int32))
	})
	return _c
}

func (_c *MockWordService_FindRandomFavoriteWordMeanings_Call) Return(_a0 *pb.FindRandomFavoriteWordMeaningsResponse, _a1 error) *MockWordService_FindRandomFavoriteWordMeanings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordService_FindRandomFavoriteWordMeanings_Call) RunAndReturn(run func(string, int32) (*pb.FindRandomFavoriteWordMeaningsResponse, error)) *MockWordService_FindRandomFavoriteWordMeanings_Call {
	_c.Call.Return(run)
	return _c
}

// FindWordByDictionary provides a mock function with given fields: word, userId
func (_m *MockWordService) FindWordByDictionary(word string, userId string) (*pb.FindWordByDictionaryResponse, error) {
	ret := _m.Called(word, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindWordByDictionary")
	}

	var r0 *pb.FindWordByDictionaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*pb.FindWordByDictionaryResponse, error)); ok {
		return rf(word, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *pb.FindWordByDictionaryResponse); ok {
		r0 = rf(word, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FindWordByDictionaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(word, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWordService_FindWordByDictionary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWordByDictionary'
type MockWordService_FindWordByDictionary_Call struct {
	*mock.Call
}

// FindWordByDictionary is a helper method to define mock.On call
//   - word string
//   - userId string
func (_e *MockWordService_Expecter) FindWordByDictionary(word interface{}, userId interface{}) *MockWordService_FindWordByDictionary_Call {
	return &MockWordService_FindWordByDictionary_Call{Call: _e.mock.On("FindWordByDictionary", word, userId)}
}

func (_c *MockWordService_FindWordByDictionary_Call) Run(run func(word string, userId string)) *MockWordService_FindWordByDictionary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockWordService_FindWordByDictionary_Call) Return(_a0 *pb.FindWordByDictionaryResponse, _a1 error) *MockWordService_FindWordByDictionary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWordService_FindWordByDictionary_Call) RunAndReturn(run func(string, string) (*pb.FindWordByDictionaryResponse, error)) *MockWordService_FindWordByDictionary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWordService creates a new instance of MockWordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWordService {
	mock := &MockWordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
