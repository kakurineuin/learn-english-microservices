// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	context "context"

	pb "github.com/kakurineuin/learn-english-microservices/web-service/pb"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCacheRepository is an autogenerated mock type for the CacheRepository type
type MockCacheRepository struct {
	mock.Mock
}

type MockCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheRepository) EXPECT() *MockCacheRepository_Expecter {
	return &MockCacheRepository_Expecter{mock: &_m.Mock}
}

// ConnectDB provides a mock function with given fields: uri
func (_m *MockCacheRepository) ConnectDB(uri string) error {
	ret := _m.Called(uri)

	if len(ret) == 0 {
		panic("no return value specified for ConnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uri)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_ConnectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectDB'
type MockCacheRepository_ConnectDB_Call struct {
	*mock.Call
}

// ConnectDB is a helper method to define mock.On call
//   - uri string
func (_e *MockCacheRepository_Expecter) ConnectDB(uri interface{}) *MockCacheRepository_ConnectDB_Call {
	return &MockCacheRepository_ConnectDB_Call{Call: _e.mock.On("ConnectDB", uri)}
}

func (_c *MockCacheRepository_ConnectDB_Call) Run(run func(uri string)) *MockCacheRepository_ConnectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheRepository_ConnectDB_Call) Return(_a0 error) *MockCacheRepository_ConnectDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_ConnectDB_Call) RunAndReturn(run func(string) error) *MockCacheRepository_ConnectDB_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWordMeanings provides a mock function with given fields: ctx, key, wordMeanings, expiration
func (_m *MockCacheRepository) CreateWordMeanings(ctx context.Context, key string, wordMeanings []*pb.WordMeaning, expiration time.Duration) error {
	ret := _m.Called(ctx, key, wordMeanings, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateWordMeanings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*pb.WordMeaning, time.Duration) error); ok {
		r0 = rf(ctx, key, wordMeanings, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_CreateWordMeanings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWordMeanings'
type MockCacheRepository_CreateWordMeanings_Call struct {
	*mock.Call
}

// CreateWordMeanings is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - wordMeanings []*pb.WordMeaning
//   - expiration time.Duration
func (_e *MockCacheRepository_Expecter) CreateWordMeanings(ctx interface{}, key interface{}, wordMeanings interface{}, expiration interface{}) *MockCacheRepository_CreateWordMeanings_Call {
	return &MockCacheRepository_CreateWordMeanings_Call{Call: _e.mock.On("CreateWordMeanings", ctx, key, wordMeanings, expiration)}
}

func (_c *MockCacheRepository_CreateWordMeanings_Call) Run(run func(ctx context.Context, key string, wordMeanings []*pb.WordMeaning, expiration time.Duration)) *MockCacheRepository_CreateWordMeanings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*pb.WordMeaning), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCacheRepository_CreateWordMeanings_Call) Return(_a0 error) *MockCacheRepository_CreateWordMeanings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_CreateWordMeanings_Call) RunAndReturn(run func(context.Context, string, []*pb.WordMeaning, time.Duration) error) *MockCacheRepository_CreateWordMeanings_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectDB provides a mock function with given fields:
func (_m *MockCacheRepository) DisconnectDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisconnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_DisconnectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectDB'
type MockCacheRepository_DisconnectDB_Call struct {
	*mock.Call
}

// DisconnectDB is a helper method to define mock.On call
func (_e *MockCacheRepository_Expecter) DisconnectDB() *MockCacheRepository_DisconnectDB_Call {
	return &MockCacheRepository_DisconnectDB_Call{Call: _e.mock.On("DisconnectDB")}
}

func (_c *MockCacheRepository_DisconnectDB_Call) Run(run func()) *MockCacheRepository_DisconnectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheRepository_DisconnectDB_Call) Return(_a0 error) *MockCacheRepository_DisconnectDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_DisconnectDB_Call) RunAndReturn(run func() error) *MockCacheRepository_DisconnectDB_Call {
	_c.Call.Return(run)
	return _c
}

// FindWordMeanings provides a mock function with given fields: ctx, key
func (_m *MockCacheRepository) FindWordMeanings(ctx context.Context, key string) ([]*pb.WordMeaning, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for FindWordMeanings")
	}

	var r0 []*pb.WordMeaning
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*pb.WordMeaning, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*pb.WordMeaning); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.WordMeaning)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheRepository_FindWordMeanings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWordMeanings'
type MockCacheRepository_FindWordMeanings_Call struct {
	*mock.Call
}

// FindWordMeanings is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheRepository_Expecter) FindWordMeanings(ctx interface{}, key interface{}) *MockCacheRepository_FindWordMeanings_Call {
	return &MockCacheRepository_FindWordMeanings_Call{Call: _e.mock.On("FindWordMeanings", ctx, key)}
}

func (_c *MockCacheRepository_FindWordMeanings_Call) Run(run func(ctx context.Context, key string)) *MockCacheRepository_FindWordMeanings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheRepository_FindWordMeanings_Call) Return(wordMeanings []*pb.WordMeaning, err error) *MockCacheRepository_FindWordMeanings_Call {
	_c.Call.Return(wordMeanings, err)
	return _c
}

func (_c *MockCacheRepository_FindWordMeanings_Call) RunAndReturn(run func(context.Context, string) ([]*pb.WordMeaning, error)) *MockCacheRepository_FindWordMeanings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheRepository creates a new instance of MockCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheRepository {
	mock := &MockCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
